name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Server Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: server
        run: npm ci

      - name: Run tests
        working-directory: server
        run: npm test

  e2e:
    name: Run End-to-End Test
    runs-on: ubuntu-latest
    env:
      CI_PIPELINE: true
    steps:
      # 1) Checkout your repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) Use a specific Node.js version
      - name: Setup node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # 3) Cache & install dependencies
      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        working-directory: server
        run: npm ci

      # 4) Install Playwright browser engines
      - name: Install Playwright Browsers
        working-directory: server
        run: npx playwright install chromium --with-deps
      
      # 5) Run the Playwright tests
      - name: Run Playwright Tests
        working-directory: server
        run: npx playwright test --workers=1 --reporter=github

      # 6) Upload Artifacts on Failure
      - name: Upload Playwright Artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          path: |
            playwright-report/
            test-results/

  build_image:
    name: Build Docker image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}

      - name: Build and tag image
        working-directory: server
        run: |
          docker build \
            --file Dockerfile \
            --tag ghcr.io/${{ github.repository_owner }}/agileace:${{ github.sha }} \
            --tag ghcr.io/${{ github.repository_owner }}/agileace:latest \
            .

      - name: Push to GHCR
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/agileace:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/agileace:latest
